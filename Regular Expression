^  : used for begning of file
^name  : finds all the charecter at the begining of the file

$  : used for end of file
name$  : finds all the charecter at the end of the file

^name$ : find word where begning of the line starts with n then follows a .. m .. e is end of the line

(....) : use brecket for normal regex
(name) : just find word name anywhere in file even within big words is valid match

Range in Regular Expression
---------------------------
[a-z] , [A-Z] , [0-9] , or can combine all of them [a-zA-z0-9]
^ in range works as not this char rest of them [^a-z] , [^A-Z] , [^0-9] , or can combine all of them [^a-zA-z0-9]

^nam[a-z]$
  -> Find word at begging of the line with "nam" and last latter can be anything from a to z
  -> everthing is lower case

^nam[eE]$
  -> Find word at begging of the line with "namE" or "name"
  -> last char can be in upper case or lower case

^nam[^e]
  -> find word nam where last char can be anything other then e

([a-z][+][+]) or (d[+][+])
  -> find increment operator in files
  -> valid match d++, count++
                 ---      ---

Range with | (or) operator
--------------------------
([d|i][+][+])
  -> find d or i before ++

(\s\w[+][+])
  -> find all ++ variables with one latter word
  
(\s\w+[+][+])
  -> find all ++ variables with name
  
. operator in regax
-------------------
. is used to match any character

(12.01.2007)
 -> finds date with 12 anychar 01 anychar 2007 anychar
 -> valid match is 12/01/2017 , 12-01-2017 , 12/01-2017
 
we can use renge to find dates in files
([0-9][0-9].[0-9][0-9].[0-9][0-9][0-9][0-9])
  -> this pattern find 2 digits followed by anychar followed by 2 digits by anychar followed by 4 digits
  -> valid match is any dates
  
  
Meta characters
---------------

Regular Expression	Description
-----------------------------------------------------------------------------------
\d                  Any digit, short for [0-9]
\D                  A non-digit, short for [^0-9]
\s                  A whitespace character, short for [ \t\n\x0b\r\f]
\S                  A non-whitespace character, short for
\w                  A word character, short for [a-zA-Z_0-9]
\W                  A non-word character [^\w]
\S+                 Several non-whitespace characters
\b                  Matches a word boundary where a word character is [a-zA-Z0-9_]

Plus (+) operator
-----------------
Plus can be used for one or more charater in range.
\d+ is 1 or more digits

Quantifier
----------

Regular Expression   Description	                                  Examples
-----------------------------------------------------------------------------------------------------------------------
*                    Occurs zero or more times,is short for {0,}    X* finds no or several letter X, <sbr /> .* finds any 
                                                                    character sequence

+                    Occurs one or more times, is short for {1,}    X+- Finds one or several letter X

?                    Occurs no or one times, ? is short for         X? finds no or exactly one letter X
                     {0,1} 

{X}                  Occurs X number of times, {} describes         \d{3} searches for three digits, .{10} for any 
                     the order of the preceding liberal             character sequence of length 10.

{X,Y}                Occurs between X and Y times,                  \d{1,4} means \d must occur at least once and at a 
                                                                    maximum of four.

*?                   ? after a quantifier makes it a reluctant 
                     quantifier. It tries to find the smallest 
                     match. This makes the regular expression 
                     stop at the first match.

Example:
--------
123-234-2345
(\d\d\d[-]\d\d\d[-]\d\d\d\d)
  -> used to find above phone number pattern

1232342345
(\d\d\d-*\d\d\d-*\d\d\d\d)
  -> 0 or 1 "-" present in digits
  
123 234 2345
(\d\d\d\s*\d\d\d\s*\d\d\d\d)  ==  (\d\d\d\s+*\d\d\d\s+*\d\d\d\d)
  -> 0 or 1 space present in digits
  -> 2nd is 0 or more space present in digits
  
123 234-2345
(\d\d\d-*\s*\d\d\d-*\s*\d\d\d\d)
  -> combine - and \s to make pattern

(123) 234-2345
(\(*\d\d\d\)*-*\s*\d\d\d-*\s*\d\d\d\d)
  -> can be used find all types of phone number pattern



(\(*\d\d\d\)*-*\s*\d\d\d-*\s*\d\d\d\d)
  -> finds phone number
